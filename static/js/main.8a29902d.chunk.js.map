{"version":3,"sources":["Pagination.js","TableComponent.js","index.js"],"names":["Pagination","_ref","phones","itemsPerPage","clickHandler","activePage","pages","Math","ceil","length","pagesArr","_loop","i","showFrom","showTo","push","react_default","a","createElement","key","onClick","className","TableComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","withCheckboxes","toConsumableArray","allCheckedPages","sortedBy","query","selectedPhones","editInputStyle","top","left","width","height","display","editInputQuery","editCellLocation","phoneId","header","paginationClickHandler","bind","assertThisInitialized","searchParams","URLSearchParams","window","location","search","sorted","get","_sorted$split","split","_sorted$split2","slicedToArray","direction","config","isSortable","setState","map","phone","objectSpread","checked","allChecked","isAllOnPageChecked","_this$state","updatedPhones","basePhones","newPhone","forEach","updPhone","id","concat","filter","page","_this$state2","currentPagePhones","slice","isAllSelected","every","includes","arrow","color","prevState","_prevState$sortedBy","sortedByHeader","newSort","phonesToSort","sortType","sort","b","localeCompare","setURLSearchParam","_this$state3","selectedFromState","uncheckedPhones","value","getUncheckedPhones","shouldParamBeDeleted","reg","RegExp","searchableHaders","entries","isSearchable","_ref3","some","test","event","element","target","container","offsetParent","offsetTop","offsetLeft","dataset","cellValue","textContent","clientWidth","clientHeight","editQuery","_this$state$editCellL","rowByPhoneId","_this$state4","param","shouldBeDeleted","arguments","undefined","paramsString","set","delete","history","pushState","toString","_this2","_this$state5","sortBy","setFilteredPhones","type","style","position","resize","onChange","editInputHandler","onKeyDown","submitEditHandler","itemsPerPageHandler","src_Pagination_0","showSelectedHandler","showAllHandler","searchHandler","placeholder","selectAllHandler","_ref5","_ref6","_this2$getSortArrow","getSortArrow","sortStateHandler","title","selectPhoneHandler","keys","data-phone-id","data-header","onDoubleClick","editCellHandler","Component","App","columnConfig","name","age","snippet","fetch","response","json","src_TableComponent_0","React","rootElement","document","getElementById","ReactDOM","render","src_App_0"],"mappings":"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","file":"static/js/main.8a29902d.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Pagination.css';\r\n\r\nconst Pagination = ({phones, itemsPerPage, clickHandler, activePage}) => {\r\n  let pages = Math.ceil(phones.length / itemsPerPage);\r\n  let pagesArr = [];\r\n  for (let i = 1; i <= pages; i++) {\r\n    let showFrom = i * itemsPerPage - itemsPerPage;\r\n    let showTo = i * itemsPerPage;\r\n\r\n    pagesArr.push(\r\n      <span\r\n        key={i}\r\n        onClick={() => clickHandler(showFrom, showTo, i)}\r\n        className={\r\n          activePage === i\r\n            ? 'Pagination-page Pagination-active'\r\n            : 'Pagination-page'\r\n        }\r\n      >\r\n        {i}\r\n      </span>\r\n    );\r\n  }\r\n  return <div>{pagesArr}</div>;\r\n};\r\n\r\nexport default Pagination;\r\n","import React, {Component} from 'react';\r\nimport Pagination from './Pagination';\r\nimport './TableComponent.css';\r\n\r\nclass TableComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      phones: this.withCheckboxes([...this.props.phones]),\r\n      allCheckedPages: [],\r\n      sortedBy: {},\r\n      query: '',\r\n      itemsPerPage: '20',\r\n      selectedPhones: [],\r\n      activePage: 1,\r\n      editInputStyle: {\r\n        top: 0,\r\n        left: 0,\r\n        width: '120px',\r\n        height: '50px',\r\n        display: 'none'\r\n      },\r\n      editInputQuery: '',\r\n      editCellLocation: {\r\n        phoneId: '',\r\n        header: ''\r\n      }\r\n    };\r\n\r\n    this.paginationClickHandler = this.paginationClickHandler.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    let searchParams = new URLSearchParams(window.location.search);\r\n    let sorted = searchParams.get('sorted');\r\n    let query = searchParams.get('query');\r\n    let itemsPerPage = searchParams.get('perpage');\r\n    let activePage = +searchParams.get('page');\r\n\r\n    if (sorted) {\r\n      let [header, direction] = sorted.split('_');\r\n      let isSortable = this.props.config[header].isSortable;\r\n\r\n      isSortable && this.setState({sortedBy: {header, direction}});\r\n    }\r\n\r\n    if (query) {\r\n      this.setState({query});\r\n    }\r\n\r\n    if (itemsPerPage) {\r\n      this.setState({itemsPerPage, showTo: itemsPerPage});\r\n    }\r\n\r\n    if (activePage) {\r\n      this.setState({\r\n        activePage,\r\n        showFrom: activePage * itemsPerPage - itemsPerPage,\r\n        showTo: activePage * itemsPerPage\r\n      });\r\n    }\r\n  }\r\n\r\n  withCheckboxes(phones) {\r\n    return phones.map(phone => ({...phone, checked: false}));\r\n  }\r\n\r\n  selectAllHandler(phones, selectedPhones, activePage) {\r\n    let allChecked = !this.isAllOnPageChecked(activePage);\r\n    let {showFrom, showTo, allCheckedPages} = this.state;\r\n    let updatedPhones = [...phones];\r\n\r\n    updatedPhones = updatedPhones.map((phone, i) => {\r\n      if (i >= showFrom && i < showTo) {\r\n        return {...phone, checked: allChecked};\r\n      }\r\n      return phone;\r\n    });\r\n\r\n    let basePhones = this.state.phones.map(phone => {\r\n      let newPhone = {...phone};\r\n      updatedPhones.forEach(updPhone => {\r\n        if (updPhone.id === phone.id) {\r\n          newPhone.checked = updPhone.checked;\r\n        }\r\n      });\r\n\r\n      return newPhone;\r\n    });\r\n\r\n    if (allChecked) {\r\n      allCheckedPages = [...allCheckedPages, activePage];\r\n    } else {\r\n      allCheckedPages = allCheckedPages.filter(page => page !== activePage);\r\n    }\r\n\r\n    if (selectedPhones.length > 0) {\r\n      this.setState({\r\n        allCheckedPages,\r\n        selectedPhones: updatedPhones\r\n      });\r\n    } else {\r\n      this.setState({\r\n        allCheckedPages,\r\n        phones: basePhones\r\n      });\r\n    }\r\n  }\r\n\r\n  selectPhoneHandler(id, activePage) {\r\n    let {\r\n      selectedPhones,\r\n      phones,\r\n      allCheckedPages,\r\n      showFrom,\r\n      showTo\r\n    } = this.state;\r\n    let updatedPhones = selectedPhones.length > 0 ? selectedPhones : phones;\r\n\r\n    updatedPhones = updatedPhones.map(phone => {\r\n      if (id === phone.id) {\r\n        return {...phone, checked: !phone.checked};\r\n      }\r\n      return phone;\r\n    });\r\n\r\n    let currentPagePhones = updatedPhones.slice(showFrom || 0, showTo || 20);\r\n\r\n    if (this.isAllSelected(currentPagePhones)) {\r\n      allCheckedPages = [...allCheckedPages, activePage];\r\n    } else {\r\n      allCheckedPages = allCheckedPages.filter(page => page !== activePage);\r\n    }\r\n\r\n    if (selectedPhones.length > 0) {\r\n      this.setState({\r\n        allCheckedPages,\r\n        selectedPhones: updatedPhones\r\n      });\r\n    } else {\r\n      this.setState({\r\n        allCheckedPages,\r\n        phones: updatedPhones\r\n      });\r\n    }\r\n  }\r\n\r\n  isAllSelected(phones) {\r\n    return phones.every(phone => phone.checked);\r\n  }\r\n\r\n  isAllOnPageChecked(activePage) {\r\n    return this.state.allCheckedPages.includes(activePage);\r\n  }\r\n\r\n  getSortArrow(header) {\r\n    let {sortedBy} = this.state;\r\n    if (sortedBy.header === header && sortedBy.direction === 'down') {\r\n      return {arrow: '↓', color: 'green'};\r\n    } else if (sortedBy.header === header && sortedBy.direction === 'up') {\r\n      return {arrow: '↑', color: 'red'};\r\n    } else {\r\n      return {arrow: '↕', color: 'blue'};\r\n    }\r\n  }\r\n\r\n  sortStateHandler(header) {\r\n    this.setState(prevState => {\r\n      let {header: sortedByHeader, direction} = prevState.sortedBy;\r\n      let newSort = {};\r\n\r\n      if (sortedByHeader === header && direction === 'up') {\r\n        newSort = {...prevState.sortedBy, direction: 'down'};\r\n      } else if (sortedByHeader === header && direction === 'down') {\r\n        newSort = {...prevState.sortedBy, direction: 'up'};\r\n      } else {\r\n        newSort.header = header;\r\n        newSort.direction = 'down';\r\n      }\r\n\r\n      return {\r\n        sortedBy: newSort,\r\n        showFrom: 0,\r\n        showTo: prevState.itemsPerPage,\r\n        activePage: 1\r\n      };\r\n    });\r\n  }\r\n\r\n  sortBy(phones) {\r\n    let {sortedBy} = this.state;\r\n    let phonesToSort = [...phones];\r\n    let sortType = typeof phonesToSort[0][sortedBy.header];\r\n\r\n    if (sortedBy.direction === 'up') {\r\n      if (sortType === 'string') {\r\n        phonesToSort.sort((a, b) =>\r\n          b[sortedBy.header].localeCompare(a[sortedBy.header])\r\n        );\r\n      } else if (sortType === 'number') {\r\n        phonesToSort.sort((a, b) => b[sortedBy.header] - a[sortedBy.header]);\r\n      }\r\n      this.setURLSearchParam('sorted', `${sortedBy.header}_up`);\r\n    } else if (sortedBy.direction === 'down') {\r\n      if (sortType === 'string') {\r\n        phonesToSort.sort((a, b) =>\r\n          a[sortedBy.header].localeCompare(b[sortedBy.header])\r\n        );\r\n      } else if (sortType === 'number') {\r\n        phonesToSort.sort((a, b) => a[sortedBy.header] - b[sortedBy.header]);\r\n      }\r\n      this.setURLSearchParam('sorted', `${sortedBy.header}_down`);\r\n    }\r\n\r\n    return phonesToSort;\r\n  }\r\n\r\n  showSelectedHandler() {\r\n    let {\r\n      selectedPhones: selectedFromState,\r\n      phones,\r\n      itemsPerPage\r\n    } = this.state;\r\n    let selectedPhones =\r\n      selectedFromState.length > 0 ? selectedFromState : phones;\r\n    let uncheckedPhones = phones.map(phone => {\r\n      return {...phone, checked: false};\r\n    });\r\n\r\n    selectedPhones = selectedPhones.filter(phone => phone.checked).map(phone => {\r\n      return {...phone, checked: false};\r\n    });\r\n\r\n    if (selectedPhones.length === 0) {\r\n      return;\r\n    }\r\n\r\n    this.setURLSearchParam('page', 1);\r\n    this.setState({\r\n      selectedPhones,\r\n      phones: uncheckedPhones,\r\n      showFrom: 0,\r\n      showTo: +itemsPerPage,\r\n      activePage: 1,\r\n      allCheckedPages: []\r\n    });\r\n  }\r\n\r\n  showAllHandler() {\r\n    this.setURLSearchParam('page', 1);\r\n    this.setState({\r\n      selectedPhones: [],\r\n      activePage: 1,\r\n      showFrom: 0,\r\n      showTo: +this.state.itemsPerPage,\r\n      allCheckedPages: []\r\n    });\r\n  }\r\n\r\n  getUncheckedPhones(phones) {\r\n    return phones.map(phone => {\r\n      return {...phone, checked: false};\r\n    });\r\n  }\r\n\r\n  searchHandler(value) {\r\n    let uncheckedPhones = this.getUncheckedPhones(this.state.phones);\r\n    let shouldParamBeDeleted = value === '';\r\n    this.setURLSearchParam('query', value, shouldParamBeDeleted);\r\n    this.setState({\r\n      query: value,\r\n      phones: uncheckedPhones,\r\n      allCheckedPages: [],\r\n      showFrom: 0,\r\n      showTo: this.state.itemsPerPage,\r\n      activePage: 1\r\n    });\r\n  }\r\n\r\n  setFilteredPhones(phones) {\r\n    let reg = new RegExp(this.state.query, 'i');\r\n    let searchableHaders = Object.entries(this.props.config).filter(([, settings]) => settings.isSearchable).map(([header]) => header);\r\n    let filteredPhones = [...phones].filter(phone =>\r\n      searchableHaders.some(header => reg.test(phone[header]))\r\n    );\r\n\r\n    return filteredPhones;\r\n  }\r\n\r\n  itemsPerPageHandler(value) {\r\n    let uncheckedPhones = this.getUncheckedPhones(this.state.phones);\r\n\r\n    this.setURLSearchParam('perpage', value);\r\n    this.setState({\r\n      itemsPerPage: value,\r\n      showFrom: 0,\r\n      showTo: +value,\r\n      activePage: 1,\r\n      phones: uncheckedPhones,\r\n      allCheckedPages: []\r\n    });\r\n  }\r\n\r\n  paginationClickHandler(showFrom, showTo, activePage) {\r\n    this.setURLSearchParam('page', activePage);\r\n    this.setState({showFrom, showTo, activePage});\r\n  }\r\n\r\n  editCellHandler(event) {\r\n    let element = event.target;\r\n    let container = element.offsetParent;\r\n    let offsetTop = container.offsetTop + element.offsetTop;\r\n    let offsetLeft = container.offsetLeft + element.offsetLeft;\r\n    let phoneId = event.target.dataset.phoneId;\r\n    let header = event.target.dataset.header;\r\n    let cellValue = event.target.textContent;\r\n\r\n    this.setState({\r\n      editInputStyle: {\r\n        display: 'block',\r\n        top: offsetTop,\r\n        left: offsetLeft,\r\n        width: element.clientWidth - 4,\r\n        height: element.clientHeight - 4\r\n      },\r\n      editCellLocation: {\r\n        phoneId,\r\n        header\r\n      },\r\n      editInputQuery: cellValue\r\n    });\r\n  }\r\n\r\n  editInputHandler(event) {\r\n    let editQuery = event.target.value;\r\n    this.setState({editInputQuery: editQuery});\r\n  }\r\n\r\n  submitEditHandler(event) {\r\n    if (event.key !== 'Enter') {\r\n      return;\r\n    }\r\n\r\n    let {phoneId: rowByPhoneId, header} = this.state.editCellLocation;\r\n    let {editInputQuery, phones} = this.state;\r\n    let updatedPhones = [...phones];\r\n\r\n    updatedPhones = updatedPhones.map(phone => {\r\n      if (phone.id === rowByPhoneId) {\r\n        phone[header] = editInputQuery;\r\n      }\r\n      return phone;\r\n    });\r\n\r\n    this.setState({\r\n      phones: updatedPhones,\r\n      editInputStyle: {\r\n        top: 0,\r\n        left: 0,\r\n        width: '120px',\r\n        height: '50px',\r\n        display: 'none'\r\n      },\r\n      editInputQuery: '',\r\n      editCellLocation: {\r\n        phoneId: '',\r\n        header: ''\r\n      }\r\n    });\r\n  }\r\n\r\n  setURLSearchParam(param, value, shouldBeDeleted = false) {\r\n    let paramsString = window.location.search;\r\n    let searchParams = new URLSearchParams(paramsString);\r\n    searchParams.set(param, value);\r\n    shouldBeDeleted && searchParams.delete(param);\r\n    window.history.pushState(null, null, `?${searchParams.toString()}`);\r\n  }\r\n\r\n  render() {\r\n    let {\r\n      selectedPhones,\r\n      itemsPerPage,\r\n      phones,\r\n      query,\r\n      showFrom,\r\n      showTo,\r\n      activePage\r\n    } = this.state;\r\n    let {config} = this.props;\r\n\r\n    if (selectedPhones.length > 0) {\r\n      phones = selectedPhones;\r\n    }\r\n    phones = this.sortBy(phones);\r\n    phones = this.setFilteredPhones(phones);\r\n\r\n    let currentPagePhones = phones.slice(showFrom || 0, showTo || 20);\r\n\r\n    return (\r\n      <div className=\"TableComponent-container\">\r\n        <textarea\r\n          type=\"text\"\r\n          style={{\r\n            display: this.state.editInputStyle.display,\r\n            position: 'absolute',\r\n            resize: 'none',\r\n            top: this.state.editInputStyle.top,\r\n            left: this.state.editInputStyle.left,\r\n            width: this.state.editInputStyle.width,\r\n            height: this.state.editInputStyle.height\r\n          }}\r\n          value={this.state.editInputQuery}\r\n          onChange={event => this.editInputHandler(event)}\r\n          onKeyDown={event => this.submitEditHandler(event)}\r\n        />\r\n        <div className=\"TableComponent-pagination-container\">\r\n          <select\r\n            value={itemsPerPage}\r\n            onChange={event => this.itemsPerPageHandler(event.target.value)}\r\n            className=\"TableComponent-items-per-page\"\r\n          >\r\n            <option value=\"3\">3</option>\r\n            <option value=\"5\">5</option>\r\n            <option value=\"10\">10</option>\r\n            <option value=\"20\">20</option>\r\n          </select>\r\n          <Pagination\r\n            phones={phones}\r\n            itemsPerPage={itemsPerPage}\r\n            clickHandler={this.paginationClickHandler}\r\n            activePage={activePage}\r\n          />\r\n        </div>\r\n        <div className=\"TableComponent-filter-container\">\r\n          <button\r\n            type=\"button\"\r\n            onClick={() => this.showSelectedHandler()}\r\n            className=\"TableComponent-filter-selected-btn\"\r\n          >\r\n            Show selected\r\n          </button>\r\n          <button type=\"button\" onClick={() => this.showAllHandler()}>\r\n            Show All\r\n          </button>\r\n          <input\r\n            onChange={event => this.searchHandler(event.target.value)}\r\n            placeholder=\" Type to search ...\"\r\n            type=\"text\"\r\n            value={query}\r\n          />\r\n        </div>\r\n        <table className=\"TableComponent-table\">\r\n          <thead>\r\n          <tr>\r\n            <th>\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={this.isAllSelected(currentPagePhones)}\r\n                onChange={() =>\r\n                  this.selectAllHandler(phones, selectedPhones, activePage)\r\n                }\r\n              />\r\n            </th>\r\n            {Object.entries(config).map(([header, props]) => {\r\n              let {color, arrow} = this.getSortArrow(header);\r\n\r\n              return (\r\n                <th\r\n                  className={\r\n                    props.isSortable\r\n                      ? 'TableComponent-table-sortable-header'\r\n                      : null\r\n                  }\r\n                  key={header}\r\n                  onClick={\r\n                    props.isSortable\r\n                      ? () => this.sortStateHandler(header)\r\n                      : null\r\n                  }\r\n                >\r\n                  {props.title}\r\n                  {props.isSortable && (\r\n                    <span style={{color}}> {arrow}</span>\r\n                  )}\r\n                </th>\r\n              );\r\n            })}\r\n          </tr>\r\n          </thead>\r\n          <tbody>\r\n          {currentPagePhones.map(phone => (\r\n            <tr key={phone.id}>\r\n              <td>\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={phone.checked}\r\n                  onChange={() =>\r\n                    this.selectPhoneHandler(phone.id, activePage)\r\n                  }\r\n                />\r\n              </td>\r\n              {Object.keys(config).map(header => (\r\n                <td\r\n                  key={header}\r\n                  data-phone-id={phone.id}\r\n                  data-header={header}\r\n                  onDoubleClick={event => this.editCellHandler(event)}\r\n                >\r\n                  {phone[header]}\r\n                </td>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n          </tbody>\r\n        </table>\r\n        <div className=\"TableComponent-pagination-bot-container\">\r\n          <Pagination\r\n            phones={phones}\r\n            itemsPerPage={itemsPerPage}\r\n            clickHandler={this.paginationClickHandler}\r\n            activePage={activePage}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TableComponent;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport TableComponent from \"./TableComponent\";\r\n\r\nimport \"./App.css\";\r\nclass App extends React.Component {\r\n  state = {\r\n    phones: [],\r\n    columnConfig: {\r\n      name: {\r\n        title: \"Название\", // так будет называться колонка в таблице\r\n        isSortable: true,\r\n        isSearchable: true // Поиск будет проверять эту и последнюю колонки\r\n      },\r\n      age: {\r\n        title: \"Возраст\",\r\n        isSortable: true // по этой колонке можно сортировать\r\n      },\r\n      snippet: {\r\n        // Только для тех ключей которые есть в columnConfig будут колонки в таблице\r\n        title: \"Описание\",\r\n        isSearchable: true // В этой колонке тоже будет происходить поиск query\r\n      }\r\n    }\r\n  };\r\n\r\n  async componentDidMount() {\r\n    let response = await fetch(\r\n      \"https://raw.githubusercontent.com/vladikcoder/phones-app/master/phones/phones.json\"\r\n    );\r\n    let phones = await response.json();\r\n\r\n    this.setState({ phones });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Data table</h1>\r\n        {this.state.phones.length > 0 ? (\r\n          <TableComponent\r\n            phones={this.state.phones}\r\n            config={this.state.columnConfig}\r\n          />\r\n        ) : (\r\n          \"loading...\"\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n"],"sourceRoot":""}